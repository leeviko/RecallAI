// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Flashcard {
  id             String         @id @default(cuid())
  userId         String
  type           FlashcardType
  question       String
  answer         String        
  choices        String[]       @default([]) // For multichoice
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deckId         String
  deck           Deck           @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@map("flashcard")
}

model Deck  {
  id         String      @id @default(cuid())
  name       String
  cards      Flashcard[]
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deckMetrics DeckMetrics[]
  studySessions StudySession[]

  @@map("deck")
}

model DeckMetrics {
  id          String      @id @default(uuid())
  deckId      String
  userId      String
  lastVisited DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  deck        Deck        @relation(fields: [deckId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deckId, userId])
  @@map("deck_metrics")
}

model StudySession {
  id        String    @id @default(uuid())
  userId    String
  deckId    String?
  totalTime Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck      Deck?      @relation(fields: [deckId], references: [id], onDelete: SetNull)

  @@map("study_session")
  @@index([userId, updatedAt])
}


enum FlashcardType {
  QA
  MULTICHOICE
  TRUEFALSE
}

// AUTH

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  decks         Deck[]
  deckMetrics   DeckMetrics[]
  studySessions StudySession[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
